
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeOperators #-}

module Api.User where

import Config (AppT (..))
import Control.Monad.Except (MonadIO, liftIO)
import Control.Monad.Logger (logDebugNS)
import Control.Monad.Metrics (increment, metricsCounters)
import qualified Control.Monad.Metrics as Metrics
import Data.Foldable (traverse_)
import Data.HashMap.Lazy (HashMap)
import Data.IORef (readIORef)
import Data.Int (Int64)
import Data.Text (Text, pack)
import Database.Persist.Postgresql
  ( Entity (..),
    fromSqlKey,
    insert,
    selectFirst,
    selectList,
    (==.),
  )
import GHC.IO (unsafePerformIO)
import Lens.Micro ((^.))
import Models (User (User, userMessages), runDb, userEmail, userName)
import qualified Models as Md
import Say (say)
import Servant
-- import Servant.JS (vanillaJS, writeJSForAPI)
import qualified System.Metrics.Counter as Counter
import Data.Maybe (catMaybes, fromMaybe)

type UserAPI =
    "users" :> QueryParam "name" Text :> QueryParam "email" Text :> Get '[JSON] [Entity User]
    :<|> "users" :> ReqBody '[JSON] User :> Post '[JSON] Int64

-- :<|> "metrics" :> Get '[JSON] (HashMap Text Int64)

userApi :: Proxy UserAPI
userApi = Proxy

-- | The server that runs the UserAPI
userServer :: MonadIO m => ServerT UserAPI (AppT m)
userServer = filterUsers
    :<|> createUser

-- :<|> waiMetrics

-- | Returns all users in the database.
allUsers :: MonadIO m => AppT m [Entity User]
allUsers = do
  -- increment "allUsers"
  logDebugNS "web" "allUsers"
  runDb (selectList [] [])

-- | Returns a user by name or throws a 404 error.
filterUsers :: MonadIO m => Maybe Text -> Maybe Text -> AppT m [Entity User]
filterUsers name email = do
  -- increment "singleUser"
  logDebugNS "web" "filterUsers"
  let filterList = catMaybes [(Md.UserName ==.) <$> name, (Md.UserEmail  ==.) <$> email]
  runDb (selectList filterList [])

-- | Creates a user in the database.
createUser :: MonadIO m => User -> AppT m Int64
createUser p = do
  -- increment "createUser"
  logDebugNS "web" "creating a user"
  newUser <- runDb (insert (User (userName p) (userEmail p) (userMessages p)))
  return $ fromSqlKey newUser

-- | Return wai metrics as JSON
-- waiMetrics :: MonadIO m => AppT m (HashMap Text Int64)
-- waiMetrics = do
--     increment "metrics"
--     logDebugNS "web" "metrics"
--     metr <- Metrics.getMetrics
--     liftIO $ mapM Counter.read =<< readIORef (metr ^. metricsCounters)

-- | Generates JavaScript to query the User API.
-- generateJavaScript :: IO ()
-- generateJavaScript =
--   writeJSForAPI (Proxy :: Proxy UserAPI) vanillaJS "./assets/api.js"
